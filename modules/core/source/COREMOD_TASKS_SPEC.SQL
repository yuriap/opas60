

CREATE OR REPLACE
package coremod_tasks as

  --Task queue status
  gtqNEW       constant varchar2(10):='NEW';
  gtqQUEUED    constant varchar2(10):='QUEUED';
  gtqSTARTED   constant varchar2(10):='STARTED';
  gtqSCHEDULED constant varchar2(10):='SCHEDULED';
  gtqRUNNING   constant varchar2(10):='RUNNING';
  gtqSUCCEEDED constant varchar2(10):='SUCCEEDED';
  gtqFAILED    constant varchar2(10):='FAILED';
  gtqCanceled  constant varchar2(10):='CANCELED';

  --Task priorities
  tpHIGH       constant varchar2(10):='HIGH';
  tpNORM       constant varchar2(10):='NORM';
  tpLOW        constant varchar2(10):='LOW';
  tpINTERNAL   constant varchar2(10):='INTERNAL';

  exTimedOutTask exception;

  procedure cleanup_tasks;

  procedure create_task(p_taskname      opas_task.taskname%type,
                        p_modname       opas_task.modname%type,
                        p_is_public     opas_task.is_public%type default 'Y',
                        p_task_priority opas_task.task_priority%type,
                        p_task_body     opas_task.task_body%type);

  procedure drop_task(p_taskname opas_task.taskname%type);

  function  prep_execute_task(p_taskname opas_task.taskname%type,
                              p_task_subname opas_task_queue.task_subname%type default null) return opas_task_queue.tq_id%type;
  procedure queue_task(p_tq_id opas_task_queue.tq_id%type, p_start_time date default null);
  procedure cancel_task(p_tq_id opas_task_queue.tq_id%type);

  procedure set_task_param(p_tq_id opas_task_queue.tq_id%type, p_name opas_task_pars.par_name%type, p_num_par number);
  procedure set_task_param(p_tq_id opas_task_queue.tq_id%type, p_name opas_task_pars.par_name%type, p_varchar_par varchar2);
  procedure set_task_param(p_tq_id opas_task_queue.tq_id%type, p_name opas_task_pars.par_name%type, p_date_par date);
  procedure set_task_param_list(p_tq_id opas_task_queue.tq_id%type, p_name opas_task_pars.par_name%type, p_list_par varchar2);

  procedure create_task_job;
  procedure execute_task_proc; --job coord proc
  procedure exec_coordinator;

  procedure execute_task(p_tq_id opas_task_queue.tq_id%type);
  procedure stop_task(p_tq_id opas_task_queue.tq_id%type);
  procedure stop_previous_user_task(p_taskname   opas_task.taskname%type);

  procedure wait_task_finish(p_tq_id opas_task_queue.tq_id%type, p_timeout number default 3600);

  procedure log(p_msg opas_log.msg%type, p_tq_id opas_task_queue.tq_id%type default null);

  function get_curr_tq_id return opas_task_queue.tq_id%type;
end;
/


